'use strict';

var app = angular.module('app', [
  'ngResource',
  'ngCookies',
  'ngRoute',
  'ui.bootstrap',
  'ui.select',
  'ngSanitize',
  'xeditable',
  'toaster',
  'ngAnimate',
  'textAngular',
  'ngFileUpload',
  'NgSwitchery',
  'isteven-multi-select',
  'LocalStorageModule',
  'ngCsv'
  ]);

app.directive('jqdatepicker', ['$timeout', function (disableKeyPress) {
  return {
    link: function (scope, element, attrs) {
      var format = element.attr('format');
      if (format == undefined || format == null || format.trim() == '') {
        format = "yy-mm-dd";
      }
      var defaultDate = new Date();
      var maxDate = null;
      if(attrs.minDate!= undefined){
        var sDate = attrs.minDate;
        var yr = parseInt(sDate.substring(0,4));
        var mnth = parseInt(sDate.substring(5,7));
        var dt = parseInt(sDate.substring(8,10));
        defaultDate = new Date(yr, mnth-1, dt);
        if(attrs.planDuration != undefined){
          maxDate = new Date(defaultDate.getTime()+(parseInt(attrs.planDuration)*7*86400000));
        }
      }
    
    element.datepicker({
      dateFormat: format,
      onSelect: function (dateText) {
        var modelPath = $(this).attr('ng-model');
        var expression = attrs.ngModel + "=" + "'" + dateText + "'";
        scope.$apply(expression);
        element.focus();
      }
    });
    var keypressdisable = function () {
      element.keydown(function (key) {
        return false;
      })
    };
    disableKeyPress(keypressdisable, 0);
    }
  }
}]);

app.directive('ngConfirmClick', [
  function(){
    return {
      link: function (scope, element, attr) {
        var msg = attr.ngConfirmClick || "Desea confirmar la accion?";
        var clickAction = attr.confirmedClick;
        element.bind('click',function (event) {
          if ( window.confirm(msg) ) {
              scope.$eval(clickAction)
          }
        });
      }
    };
}])

app.directive('fileModel', ['$parse', function ($parse) {
  return {
    restrict: 'A',
    link: function(scope, element, attrs) {
      var model = $parse(attrs.fileModel);
      var modelSetter = model.assign;

      element.bind('change', function(){
        scope.$apply(function(){
          modelSetter(scope, element[0].files[0]);
        });
      });
    }
  };
}]);

app.directive('icheck', ['$timeout', '$parse', function($timeout, $parse) {
  return {
    compile: function(element, $attrs) {
      var icheckOptions = {
        checkboxClass: 'icheckbox_flat-green',
        radioClass: 'iradio_flat-green'
      };

      var modelAccessor = $parse($attrs['ngModel']);
      return function ($scope, element, $attrs, controller) {

        var modelChanged = function(event) {
          $scope.$apply(function() {
            modelAccessor.assign($scope, event.target.checked);
          });
        };

        $scope.$watch(modelAccessor, function (val) {
          var action = val ? 'check' : 'uncheck';
          element.iCheck(icheckOptions,action).on('ifChanged', modelChanged);
        });
      };
    }
  };
}]);

app.directive('exportTable', exportTable);

function exportTable(){
  var link = function($scope, elm, attr){
    $scope.$on('export-pdf', function(e, d){
          elm.tableExport({type:'pdf', escape:false, pdfLeftMargin:20, separator: ';'});
     });
    $scope.$on('export-excel', function(e, d){
           elm.tableExport({type:'excel', escape:false, separator: ';'});
     });
    $scope.$on('export-doc', function(e, d){
         elm.tableExport({type: 'doc', escape:false, separator: ';'});
     });
  }
  return {
    restrict: 'C',
    link: link
  }
}

app.service('fileUpload', ['$http', function ($http) {
  this.uploadFileToUrl = function(taskId, userId, comment, file, uploadUrl){
    var fd = new FormData();
    fd.append('task', taskId);
    fd.append('user', userId);
    fd.append('comment', comment);
    
    if(file){
      fd.append('docfile', file);  
    }
    
    $http.post(uploadUrl, fd, {
      transformRequest: angular.identity,
      headers: {'Content-Type': undefined}
    })
    .success(function(){
    })
    .error(function(){
    });
  }
}]);

// Factoriza los resource para obtener datos de la api de django
app.factory('moduleResource', function ($resource) {
  return $resource('/module/:id', {id:'@id'},
    {
      'query':  {method:'GET', isArray:true},
    });
});

app.factory('urgencyResource', function ($resource) {
  return $resource('/urgency/:id', {id:'@id'},
    {
      'query':  {method:'GET', isArray:true},
    });
});

app.factory('statusResource', function ($resource) {
  return $resource('/status/:id', {id:'@id'},
    {
      'query':  {method:'GET', isArray:true},
    });
});

app.factory('configurationResource', function ($resource) {
  return $resource('/userProfile/:id', {id:'@id'},
    {
      'get':    {method:'GET', isArray:false},
      'save':   {method:'POST'},
      'update': {method:'PATCH'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.factory('taskResource', function ($resource) {
  return $resource('/task/:id', {id:'@id'},
    {
      'get':    {method:'GET', isArray:false},
      'save':   {method:'POST'},
      'update': {method:'PATCH'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.factory('UserClientResource', function ($resource) {
  return $resource('/userClient/:id', {id:'@id'},
    {
      'get':    {method:'GET', isArray:false},
      'save':   {method:'POST'},
      'update': {method:'PATCH'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.factory('organizationResource', function ($resource) {
  return $resource('/organization/:id', {id:'@id'},
    {
      'get':    {method:'GET', isArray:false},
      'save':   {method:'POST'},
      'update': {method:'PUT'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.factory('usersResource', function ($resource) {
  return $resource('/users/:id', {id:'@id'},
    {
      'get':    {method:'GET', isArray:false},
      'query':  {method:'GET', isArray:true},
    });
});

app.factory('notificationResource', function ($resource) {
  return $resource('/notification/:id', {id:'@id'},
    {
      'get':    {method:'GET'},
      'save':   {method:'POST'},
      'update': {method:'PUT'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'},
      'markAsRead': { method: 'POST', isArray: true }
    });
});

app.factory('taskCommentsResource', function ($resource) {
  return $resource('/taskComment/:id', {id:'@id'},
    {
      'get':    {method:'GET'},
      'save':   {method:'POST'},
      'update': {method:'PUT'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.factory('clientResource', function ($resource) {
  return $resource('/client/:id', {id:'@id'},
    {
      'get':    {method:'GET'},
      'save':   {method:'POST'},
      'update': {method:'PUT'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.factory('todoResource', function ($resource) {
  return $resource('/todo/:id', {id:'@id'},
    {
      'get':    {method:'GET'},
      'save':   {method:'POST'},
      'update': {method:'PUT'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.factory('loginResource', function ($resource) {
  return $resource('/auth/login/:id', {id:'@id'},
    {
      'get':    {method:'GET', isArray:false},
      'save':   {method:'POST'},
      'update': {method:'PUT'},
      'query':  {method:'GET', isArray:true},
      'remove': {method:'DELETE'},
      'delete': {method:'DELETE'} 
    });
});

app.controller('taskController', taskFunction);

function taskFunction($scope, taskResource, clientResource, $uibModal, $location, $timeout, statusResource, 
  moduleResource, urgencyResource, UserClientResource, loginService, usersResource) {

  var userId = loginService.getUserId();

  $scope.vm = {
    done : '',
    client : ''
  };

  $scope.searchReferent = '';
  $scope.filterFullname = function(data) {
    return (data.userR.first_name.toLowerCase() + data.userR.last_name.toLowerCase()).indexOf($scope.searchReferent.toLowerCase()) >= 0;
  };

  // obtiene las tareas
  function getTasks() {
    $scope.tasks = taskResource.query({ done: 'False', user: userId});
  }
  getTasks();

  // marca como realizada la tarea
  $scope.doneTask = function(taskId) {
    taskResource.get({ taskId:taskId }, function(task) {
      task.done = true;
      taskResource.update({ taskId:task.id }, task);
    });
    getTasks();
  };

  // borra la tarea
  $scope.deleteTask = function(taskId) {
    taskResource.delete({ id : taskId });
    $timeout(getTasks, 500);
  };

  // obtiene todos los clientes
  function getClients() {
    UserClientResource.query({ user : userId }, function(data){
      var all = {
        userR : {
          id : '',
          first_name : 'Todos',
          last_name : '',  
        }
      };
      data.unshift(all);
      
      $scope.clients = data;
    });
  };
  getClients();

  // carga select con clientes
  UserClientResource.query({ user : userId , relation: 'D'}, function(data){
    $scope.clientsM = data;
  });

  // carga select con estados
  statusResource.query({}, function(data){
    $scope.Tstatus = data;
  });

  // carga select con modulos
  moduleResource.query({}, function(data){
    $scope.modules = data;
  });
  
  urgencyResource.query({}, function(data){
    $scope.urgency = data;
  });

  // crea tarea
  $scope.newTask = function() {
    $scope.task.user = userId;
    var nTask = $scope.task
    taskResource.save(nTask);
    $('#myModal').modal('hide');
    $timeout(getTasks, 500);
  };
}

app.controller('taskCController', taskCFunction);

function taskCFunction($scope, taskResource, UserClientResource, $uibModal, $location, $timeout, statusResource, moduleResource, urgencyResource, loginService) {

  $scope.exportAction = function(type){ 
    switch(type){ 
      case 'pdf': $scope.$broadcast('export-pdf', {}); 
        break; 
      case 'excel': $scope.$broadcast('export-excel', {}); 
        break; 
      case 'doc': $scope.$broadcast('export-doc', {});
        break; 
      default: console.log('no event caught'); 
    }
  }

  $scope.getHeader = function() {
    return ["id", "sar", "title", "description", "creation_date", "done", "start_date", "finish_date", "client", "user", "priority", "urgency", "estimation_hours", "module"]
  };

  var userId = loginService.getUserId();

  $scope.vm = {
    done : '',
    client : ''
  };

  $scope.searchReferent = '';
  $scope.filterFullname = function(data) {
    return (data.user.first_name.toLowerCase() + data.user.last_name.toLowerCase()).indexOf($scope.searchReferent.toLowerCase()) >= 0;
  };

  // obtiene las tareas
  function getTasks() {
    UserClientResource.query({ userR : userId }, function(data){
      var tasks = [];
      var user = loginService.getUser();
      var rel = {
        user : user
      }
      data.push(rel);
      data.forEach(function(rel) {
        var userId = rel.user.id;
        taskResource.query({ done: 'False', client : userId}, function(data){
          if(data.length > 0){
            tasks.push(data[0]);  
          }
        });
      })
      $scope.tasks = tasks;
      
    })
  }
  getTasks();

  // marca como realizada la tarea
  $scope.doneTask = function(taskId) {
    taskResource.get({ taskId:taskId }, function(task) {
      task.done = true;
      taskResource.update({ taskId:task.id }, task);
    });
    getTasks();
  };

  // borra la tarea
  $scope.deleteTask = function(taskId) {
    taskResource.delete({ id : taskId });
    $timeout(getTasks, 500);
  };

  // obtiene todos los clientes
  function getClients() {
    UserClientResource.query({ userR : userId }, function(data){
      var all = {
        user : {
          id : '',
          first_name : 'Todos',
          last_name : '',  
        }
      };
      data.unshift(all);
      
      $scope.clients = data;
    });
  };
  getClients();

  // carga select con clientes


  // carga select con estados
  statusResource.query({}, function(data){
    $scope.Tstatus = data;
  });

  // carga select con modulos
  moduleResource.query({}, function(data){
    $scope.modules = data;
  });
  
  urgencyResource.query({}, function(data){
    $scope.urgency = data;
  });

  // crea tarea
  $scope.newTask = function() {
    $scope.task.user = loginService.getUserId();;
    $uct = taskResource.save($scope.task);
    $uct.user = $scope.task.user;
    $uct.userR = $scope.task.client;
    $scope.task = null;

    // carga relacion usuario cliente tarea
    UserClientResource.save($uct);
    $('#myModal').modal('hide');
    $timeout(getTasks, 500);
  };
}

app.controller('taskHController', taskHFunction);

function taskHFunction($scope, taskResource, UserClientResource, loginservice) {

  $scope.vm = {
    done : '',
    client : ''
  };

  // obtiene las tareas
  function getTasks() {
    $scope.tasks = taskResource.query({ done : 'True'});
  }
  getTasks();

  // obtiene todos los clientes
  getClients = function() {
    UserClientResource.query({ user_id : loginService.getUserId() }, function(data){
      all = {
        userR : {
          id : '',
          first_name : 'Todos',
          last_name : '',  
        }
      };
      data.unshift(all);
      
      $scope.clients = data;
    });
  };
  getClients();
}

app.controller('commentsController', commentsFunction);

function commentsFunction($scope, taskCommentsResource, $routeParams, taskResource, notificationResource, $timeout, $location, toaster, fileUpload, loginService) {
  // numero de pagina inicial para paginador
  $scope.currentPage = 1;

  // obtiene el id de la tarea desde la url y la convierte a int
  var taskId = parseInt($routeParams.taskId, 10);

  var userId = loginService.getUserId();

  $scope.userId = userId;

  // obtiene comentarios de la tarea seleccionada
  function getComments(){
   taskCommentsResource.get({ task : taskId }, function(data){
      $scope.allComments = data.results;    
      $scope.totalItems = data.count;
    })
  };
  getComments();

  // cuando cambia la pagina , setea numero de pagina en la consulta y actualiza los resultados
  $scope.pageChanged = function() {
    taskCommentsResource.get({ task : taskId , page : $scope.currentPage}, function(data){
      $scope.allComments = data.results;    
    })
  };

  // crea nuevo comentario
  $scope.newComment = function () {
  	var file = $scope.cm.docfile;
  	var comment = $scope.cm.comment;
    var uploadUrl = "/taskComment/";
  	fileUpload.uploadFileToUrl(taskId, userId, comment, file, uploadUrl);

    // limpia formulario
    $scope.cm = null;

    // notifica al usuario
    var nt = new notificationResource;
    nt.user = cTask.client.id;
    nt.ntype = "comentario";
    nt.notification = taskId;
    nt.$save();
    $timeout(getComments, 300);
    $timeout(getAttachments, 300);
    $scope.currentPage = 1;
  };

  $scope.deleteComment = function (commentId) {
    taskCommentsResource.delete({id : commentId})
    $timeout(getComments, 300);
    $timeout(getAttachments, 300);
  };  

  // obtengo tarea actual
  var cTask = taskResource.get({ id : taskId }, function(task){
    $scope.task = task;   
  });

  // actualiza tarea actual
  $scope.updateTask = function(){
    cTask = $scope.task;
    cTask.$update();
  };
  
  // borra tarea actual
  $scope.deleteTask = function(){
    if (confirm("Esta seguro de borrar la tarea ?")) {
      cTask = $scope.task;
      cTask.$delete();
      $location.path( "/" );
      toaster.pop('success', 'Tarea', 'La tarea se borro correctamente.');
    }
  };

  // cierra tarea actual
  $scope.doneTask = function(){
    if (confirm("Esta seguro de cerrar la tarea ?")) {
      cTask = $scope.task;
      taskResource.update(
        {id: cTask.id, done: true}
      );

      $location.path( "/" );
      $scope.tasks = taskResource.query({ done: 'False'});
      toaster.pop('success', 'Tarea', 'La tarea se cerro correctamente.');
    }
  };

  $scope.openTask = function(){
    if (confirm("Esta seguro de cerrar la tarea ?")) {
      cTask = $scope.task;
      taskResource.update(
        {id: cTask.id, done: false}
      );

      $location.path( "/" );
      $scope.tasks = taskResource.query({ done: 'False'});
      toaster.pop('success', 'Tarea', 'La tarea se cerro correctamente.');
    }
  };

  // Lista de adjuntos
  function getAttachments() {
    taskCommentsResource.get({ task : taskId , attachment : 'True'}, function(data){
      $scope.attachments = data.results;
    })
  };
  getAttachments();
}

app.controller('mainController', mainFunction);

function mainFunction($scope, notificationResource, $timeout, $http, $location, loginService, localStorageService) {

  // obtiene todas las notificaciones
  function getAllNotifications() {
    notificationResource.get({read: 'False'}, function(data){
      $scope.countNotification = data.count;
      $scope.notifications = data.results;
    });
  };
  getAllNotifications();

  // marca todas como leidas
  $scope.markAsRead = function(all){
    all.forEach(function(data) {
      data.read = true;
      notificationResource.update({id : data.id}, data);
    });
    $timeout(getAllNotifications, 500);
  };

  $scope.logout = function() {
    loginService.logout();
    localStorageService.get('user')
    $scope.online = false;
  };

  if(localStorageService.get('user')){
    $scope.username = loginService.getUsername();
    $scope.online = true;
  }
  
}

app.controller('todoController', todoFunction);

function todoFunction($scope, todoResource, $timeout, $routeParams, loginService) {
  var userId = loginService.getUserId();
  // lista de mis tareas, si lleva taskId lista solo checkist de una tarea especifica

  var taskId = parseInt($routeParams.taskId)
  function getTodoTask() {
    if(taskId){
      todoResource.query({user: userId, task : taskId}, function(data){
        $scope.todoTasks = data;
      });
    }else{
      todoResource.query({user: userId, task_is_null : "True"}, function(data){
        $scope.todoTasks = data;
      });
    }
  };
  getTodoTask();

  // agrega tarea al usuario
  $scope.addTodo = function () {
    var td = new todoResource;

    // para diferenciar tareas individuales
    if(taskId){
      td.task = taskId;
    };

    td.description = $scope.description;
    td.user = userId;
    td.$save();
    $timeout(getTodoTask, 500);

    //limpia campo descripcion de tarea
    $scope.description = null;
  }

  // borra tarea al usuario
  $scope.deleteTodo = function (todoId) {
    todoResource.get({id: todoId}, function(data){
      todoResource.delete({id : data.id});
      $timeout(getTodoTask, 500);
    });
  }

  // marca tarea como realizada
  $scope.doneTodo = function (todoId) {
    var td = todoResource.get({id : todoId}, function(data){
      var td = data;
      td.done = !td.done;
      td.$update();
      $timeout(getTodoTask, 500);
    });
  }
}

app.controller('loginController', loginController)

function loginController($scope, $http, localStorageService, loginService) {
  var vm = this;
  vm.usr = {};

  $scope.login = function() 
  {
    var vm = this;
    var data = {
      username : vm.usr.username,
      password : vm.usr.password
    };

    localStorageService.set('data_login', data);
    loginService.login();
  }

  $scope.register = function() {
    var vm = this;
    var data = {
      username : vm.usr.new_username,
      password : vm.usr.new_password,
    };

    // Registro usuario
    $http.post('http://localhost:8000/auth/register/', data_register).then(function(result){
      // Una vez registrado , logueo usuario
      localStorageService.set('data_login', data)
      loginService.login();
    });
  }

  $scope.resetPassword = function(){
    loginService.resetPassword();
  }
}

app.controller('customerModalCtrl', ['$scope', '$modalInstance', 'task', function ($scope, $uibModalInstance, task) {
  $scope.customer = task;

  if (task.CustomerId > 0)
      $scope.headerTitle = 'Edit Customer';
  else
      $scope.headerTitle = 'Add Customer';

  $scope.save = function () {

  };

  $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
  };
}]); 

app.controller('configController', function ($scope, UserClientResource, usersResource, $injector, $timeout, configurationResource, loginService) {

  var userId = loginService.getUserId();

  configurationResource.query({user : userId}, function(data){
    $scope.user = data[0];
  }); 

  $scope.save = function() {

    // Arma relacion directa con cada uno de los seleccionados en el combo.
    angular.forEach( $scope.relYes, function(value, key){
      var rel = {
        user : userId,
        userR : value.id,
        relation : 'D'
      };
      UserClientResource.save(rel);

      // Empieza el camino de la herencia.
      // Padre va a ser el usuario con el cual se vincula en la relacion original directa.
      var padre = value.id;

      // Busca hijo en columna de padre
      UserClientResource.query({ userR : userId }, function(data){

        angular.forEach(data, function(value, key){
          var rel = {
            user : value.user.id,
            userR : padre,
            relation : 'H'
          };
          UserClientResource.save(rel);          
        });
      });
    });
  };

  $scope.changeStatus = function() {
    var user = $scope.user;
    user.online = !user.online;
    user.$save();
  };
  
  function getNrel() {
    usersResource.query({ ne : userId}, function(data){
      $scope.relNo = data;
    });
  };

  function getYrel() {
    UserClientResource.query({user_id : userId }, function(data){
      $scope.relYes = data;
    });
  };

  getNrel();
  getYrel();
}); 

app.controller('messagesController', messageFunction);

function messageFunction($scope, UserClientResource, loginService) {

  // obtiene todos los clientes
  function getClients() {
    UserClientResource.query({user_id : loginService.getUserId() }, function(data){
      all = {
        id : '',
        name : 'Todos',
        lastname : '',
        organization : 0
      }
      data.unshift(all);
      $scope.clients = data;
    });
  };
  getClients();
}

app.provider('taskProvider', UnicornLauncherProvider);

function UnicornLauncherProvider() {
  var useTinfoilShielding = false;

  this.useTinfoilShielding = function(value) {
    useTinfoilShielding = !!value;
  };

  this.$get = ["apiToken", function unicornLauncherFactory(apiToken) {
    return new UnicornLauncher(apiToken, useTinfoilShielding);
  }];
}